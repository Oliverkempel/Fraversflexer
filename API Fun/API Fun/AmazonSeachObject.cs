// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using API_Fun;
//
//    var amazonSeachObject = AmazonSeachObject.FromJson(jsonString);

namespace API_Fun
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AmazonSeachObject
    {
        [JsonProperty("request_info")]
        public RequestInfo RequestInfo { get; set; }

        [JsonProperty("request_parameters")]
        public RequestParameters RequestParameters { get; set; }

        [JsonProperty("request_metadata")]
        public RequestMetadata RequestMetadata { get; set; }

        [JsonProperty("search_results")]
        public SearchResult[] SearchResults { get; set; }

        [JsonProperty("related_brands")]
        public RelatedBrand[] RelatedBrands { get; set; }

        [JsonProperty("pagination")]
        public Pagination Pagination { get; set; }

        [JsonProperty("refinements")]
        public Refinements Refinements { get; set; }
    }

    public partial class Pagination
    {
        [JsonProperty("total_results")]
        public long TotalResults { get; set; }

        [JsonProperty("current_page")]
        public long CurrentPage { get; set; }

        [JsonProperty("next_page_link")]
        public Uri NextPageLink { get; set; }

        [JsonProperty("total_pages")]
        public long TotalPages { get; set; }
    }

    public partial class Refinements
    {
        [JsonProperty("prime")]
        public Brand[] Prime { get; set; }

        [JsonProperty("departments")]
        public Brand[] Departments { get; set; }

        [JsonProperty("reviews")]
        public Brand[] Reviews { get; set; }

        [JsonProperty("price")]
        public Brand[] Price { get; set; }

        [JsonProperty("brand")]
        public Brand[] Brand { get; set; }
    }

    public partial class Brand
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Link { get; set; }

        [JsonProperty("refinement_display_name")]
        public string RefinementDisplayName { get; set; }
    }

    public partial class RelatedBrand
    {
        [JsonProperty("logo", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Logo { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("store_link")]
        public Uri StoreLink { get; set; }

        [JsonProperty("store_id")]
        public string StoreId { get; set; }

        [JsonProperty("store_name")]
        public string StoreName { get; set; }
    }

    public partial class RequestInfo
    {
        [JsonProperty("success")]
        public bool Success { get; set; }

        [JsonProperty("credits_used")]
        public long CreditsUsed { get; set; }

        [JsonProperty("credits_remaining")]
        public long CreditsRemaining { get; set; }

        [JsonProperty("credits_used_this_request")]
        public long CreditsUsedThisRequest { get; set; }
    }

    public partial class RequestMetadata
    {
        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("processed_at")]
        public DateTimeOffset ProcessedAt { get; set; }

        [JsonProperty("total_time_taken")]
        public double TotalTimeTaken { get; set; }

        [JsonProperty("amazon_url")]
        public Uri AmazonUrl { get; set; }
    }

    public partial class RequestParameters
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("amazon_domain")]
        public string AmazonDomain { get; set; }

        [JsonProperty("search_term")]
        public string SearchTerm { get; set; }

        [JsonProperty("sort_by")]
        public string SortBy { get; set; }

        [JsonProperty("exclude_sponsored")]
        [JsonConverter(typeof(ParseStringConverter))]
        public bool ExcludeSponsored { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("customer_location")]
        public string CustomerLocation { get; set; }

        [JsonProperty("output")]
        public string Output { get; set; }

        [JsonProperty("include_html")]
        [JsonConverter(typeof(ParseStringConverter))]
        public bool IncludeHtml { get; set; }
    }

    public partial class SearchResult
    {
        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("asin")]
        public string Asin { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("categories")]
        public Category[] Categories { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("rating")]
        public double Rating { get; set; }

        [JsonProperty("ratings_total")]
        public long RatingsTotal { get; set; }

        [JsonProperty("prices")]
        public Price[] Prices { get; set; }

        [JsonProperty("price")]
        public Price Price { get; set; }

        [JsonProperty("coupon", NullValueHandling = NullValueHandling.Ignore)]
        public Coupon Coupon { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }
    }

    public partial class Coupon
    {
        [JsonProperty("badge_text")]
        public string BadgeText { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("symbol")]
        public Symbol Symbol { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("raw")]
        public string Raw { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("is_primary", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPrimary { get; set; }

        [JsonProperty("asin", NullValueHandling = NullValueHandling.Ignore)]
        public string Asin { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Link { get; set; }

        [JsonProperty("is_rrp", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRrp { get; set; }
    }

    public enum Id { Aps };

    public enum Name { AlleKategorien };

    public enum Currency { Eur };

    public enum Symbol { Empty };

    public partial class AmazonSeachObject
    {
        public static AmazonSeachObject FromJson(string json) => JsonConvert.DeserializeObject<AmazonSeachObject>(json, API_Fun.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AmazonSeachObject self) => JsonConvert.SerializeObject(self, API_Fun.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                IdConverter.Singleton,
                NameConverter.Singleton,
                CurrencyConverter.Singleton,
                SymbolConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class IdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Id) || t == typeof(Id?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "aps")
            {
                return Id.Aps;
            }
            throw new Exception("Cannot unmarshal type Id");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Id)untypedValue;
            if (value == Id.Aps)
            {
                serializer.Serialize(writer, "aps");
                return;
            }
            throw new Exception("Cannot marshal type Id");
        }

        public static readonly IdConverter Singleton = new IdConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Alle Kategorien")
            {
                return Name.AlleKategorien;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            if (value == Name.AlleKategorien)
            {
                serializer.Serialize(writer, "Alle Kategorien");
                return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class CurrencyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Currency) || t == typeof(Currency?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "EUR")
            {
                return Currency.Eur;
            }
            throw new Exception("Cannot unmarshal type Currency");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Currency)untypedValue;
            if (value == Currency.Eur)
            {
                serializer.Serialize(writer, "EUR");
                return;
            }
            throw new Exception("Cannot marshal type Currency");
        }

        public static readonly CurrencyConverter Singleton = new CurrencyConverter();
    }

    internal class SymbolConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Symbol) || t == typeof(Symbol?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "€")
            {
                return Symbol.Empty;
            }
            throw new Exception("Cannot unmarshal type Symbol");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Symbol)untypedValue;
            if (value == Symbol.Empty)
            {
                serializer.Serialize(writer, "€");
                return;
            }
            throw new Exception("Cannot marshal type Symbol");
        }

        public static readonly SymbolConverter Singleton = new SymbolConverter();
    }
}
